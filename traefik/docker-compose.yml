services:
  traefik:
    image: docker.io/library/traefik:v3.5.0
    container_name: traefik
    ports:
      - 443:443
    volumes:
      - /run/docker.sock:/run/docker.sock:ro
      - ${BASE_PATH}/traefik/config:/etc/traefik:rw
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CF_DNS_API_EMAIL=${CLOUDFLARE_EMAIL_ADDRESS}
    command:
      # Providers
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=frontend
      - --providers.file.directory=/etc/traefik
      - --providers.file.watch=true

      # Entrypoints
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certresolver=cloudflare
      - --entrypoints.websecure.http.tls.options=securetls@file

      # Certificates
      - --certificatesresolvers.cloudflare.acme.storage=/etc/traefik/certs/cloudflare-acme.json
      - --certificatesresolvers.cloudflare.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53

      # Dashboard
      - --api.dashboard=true

      # Metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.manualrouting=true

      # Logging
      - --log.level=ERROR
      - --accesslog=true

    labels:
      - traefik.enable=true

      # üõ°Ô∏è Secure Headers Middleware
      - traefik.http.middlewares.secureHeaders.headers.frameDeny=true
      - traefik.http.middlewares.secureHeaders.headers.sslRedirect=true
      - traefik.http.middlewares.secureHeaders.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secureHeaders.headers.browserXssFilter=true
      - traefik.http.middlewares.secureHeaders.headers.referrerPolicy=no-referrer-when-downgrade
      - traefik.http.middlewares.secureHeaders.headers.permissionsPolicy=geolocation=(), microphone=()
      - traefik.http.middlewares.secureHeaders.headers.stsSeconds=31536000
      - traefik.http.middlewares.secureHeaders.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secureHeaders.headers.stsPreload=true

      # üîê Authentik ForwardAuth Middleware
      - traefik.http.middlewares.authentik.forwardauth.address=http://authentik-server:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version

      # ü§ñ Robot Headers Middleware
      - traefik.http.middlewares.robotHeaders.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow

      # üß† Content-Type Detection Middleware
      - traefik.http.middlewares.autodetect.contenttype=true

      # üìä Metrics Router (HTTPS only)
      - traefik.http.routers.metrics.entrypoints=websecure
      - traefik.http.routers.metrics.rule=Host(`metrics.${BASE_DOMAIN_NAME}`) && Path(`/prometheus`)
      - traefik.http.routers.metrics.service=prometheus@internal
      - traefik.http.routers.metrics.tls=true
      - traefik.http.routers.metrics.tls.certresolver=cloudflare
      - traefik.http.routers.metrics.tls.options=securetls@file
      - traefik.http.routers.metrics.middlewares=secureHeaders@docker,robotHeaders@docker,autodetect@docker,authentik@docker

      # üìã Dashboard Router (HTTPS only)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`dash.${BASE_DOMAIN_NAME}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=cloudflare
      - traefik.http.routers.traefik.tls.options=securetls@file
      - traefik.http.routers.traefik.middlewares=secureHeaders@docker,robotHeaders@docker,autodetect@docker,authentik@docker

    networks:
      - frontend
    restart: unless-stopped
